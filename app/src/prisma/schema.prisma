generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  civicAuthId  String   @unique
  name         String?
  email        String?
   solWalletAddress String? 
  portfolios        Portfolio[]
  storefronts       Storefront[]   
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  twitterUrl     String?
  linkedInUrl    String?
  instagramUrl   String?
  facebookUrl    String?
  youTubeUrl     String?
}

model Portfolio {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  userId       String    @unique @db.ObjectId
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  fullName     String  
  skill        String    
  description  String?   
  profilePhoto String?   
  projects     Project[] 
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  portfolioId String    @db.ObjectId
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  name        String    // Project name
  liveUrl     String?   // Live URL for the project
  imageUrl    String?   // Image URL for the project
  description String?   // Project description
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Storefront entity
model Storefront {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  userId      String     @unique @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String   
  imageUrl    String?   
  description String?   
  categories  Category[] 
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Category {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storefrontId String     @db.ObjectId
  storefront   Storefront @relation(fields: [storefrontId], references: [id], onDelete: Cascade)
  name        String     
  products    Product[]  
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Product {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  categoryId    String    @db.ObjectId
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  name          String    
  productImageUrl String? 
  price         String?   
  description   String?   
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}